{"abi":[{"type":"function","name":"verifyCall","inputs":[{"name":"who","type":"address","internalType":"address"},{"name":"where","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"callData","type":"bytes","internalType":"bytes"},{"name":"verificationData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"verifyCall(address,address,uint256,bytes,bytes)":"70e46bcb"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"verificationData\",\"type\":\"bytes\"}],\"name\":\"verifyCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows plug-in modules to define arbitrary logic for verifying function calls.      Used with `VerificationType.CUSTOM_VERIFIER` in the main Verifier contract.\",\"kind\":\"dev\",\"methods\":{\"verifyCall(address,address,uint256,bytes,bytes)\":{\"params\":{\"callData\":\"Full calldata of the intended call\",\"value\":\"ETH value sent with the call\",\"verificationData\":\"Extra data provided by the caller to support verification logic\",\"where\":\"Target contract the call is directed to\",\"who\":\"Address attempting the call\"},\"returns\":{\"_0\":\"isValid          True if the call is considered valid, false otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verifyCall(address,address,uint256,bytes,bytes)\":{\"notice\":\"Verifies whether the given call is permitted using custom logic\"}},\"notice\":\"Interface for external/custom verification logic\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/permissions/ICustomVerifier.sol\":\"ICustomVerifier\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/\"]},\"sources\":{\"src/interfaces/permissions/ICustomVerifier.sol\":{\"keccak256\":\"0xdb343366ed86f63f8a94ff478c5c8e1d127888e4993c27fcb3bb3b51ae0cb8c7\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://12407e89b20982a00961ccc03258e353962607747f214940d18b0989c11547c9\",\"dweb:/ipfs/Qmay19iWpwiV8LuvWccPjsazVU5Kkhme9QykFfLKfBmvSr\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"who","type":"address"},{"internalType":"address","name":"where","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bytes","name":"verificationData","type":"bytes"}],"stateMutability":"view","type":"function","name":"verifyCall","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"verifyCall(address,address,uint256,bytes,bytes)":{"params":{"callData":"Full calldata of the intended call","value":"ETH value sent with the call","verificationData":"Extra data provided by the caller to support verification logic","where":"Target contract the call is directed to","who":"Address attempting the call"},"returns":{"_0":"isValid          True if the call is considered valid, false otherwise"}}},"version":1},"userdoc":{"kind":"user","methods":{"verifyCall(address,address,uint256,bytes,bytes)":{"notice":"Verifies whether the given call is permitted using custom logic"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/permissions/ICustomVerifier.sol":"ICustomVerifier"},"evmVersion":"cancun","libraries":{}},"sources":{"src/interfaces/permissions/ICustomVerifier.sol":{"keccak256":"0xdb343366ed86f63f8a94ff478c5c8e1d127888e4993c27fcb3bb3b51ae0cb8c7","urls":["bzz-raw://12407e89b20982a00961ccc03258e353962607747f214940d18b0989c11547c9","dweb:/ipfs/Qmay19iWpwiV8LuvWccPjsazVU5Kkhme9QykFfLKfBmvSr"],"license":"BUSL-1.1"}},"version":1},"id":104}